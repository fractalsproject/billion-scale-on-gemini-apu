# coding: utf-8

"""
    GSI Floating-Point 32 API

    **Introduction**<br> GSI Technology’s floating-point similarity search API provides an accessible gateway to running searches on GSI’s Gemini® Associative Processing Unit (APU).<br> It works in conjunction with the GSI system management solution which enables users to work with multiple APU boards simultaneously for improved performance.<br><br> **Dataset and Query Format**<br> Dataset embeddings can be in 32- or 64-bit floating point format, and any number of features, e.g. 256 or 512 (there is no upper limit).<br> Query embeddings must have the same floating-point format and number of features as used in the dataset.<br> GSI performs the search and delivers the top-k most similar results.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MonitorRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'duration': 'float',
        'interval': 'float',
        'metric': 'str'
    }

    attribute_map = {
        'duration': 'duration',
        'interval': 'interval',
        'metric': 'metric'
    }

    def __init__(self, duration=5, interval=1, metric=None):  # noqa: E501
        """MonitorRequest - a model defined in Swagger"""  # noqa: E501
        self._duration = None
        self._interval = None
        self._metric = None
        self.discriminator = None
        if duration is not None:
            self.duration = duration
        if interval is not None:
            self.interval = interval
        if metric is not None:
            self.metric = metric

    @property
    def duration(self):
        """Gets the duration of this MonitorRequest.  # noqa: E501

        Duration (minutes) of the metric collection  # noqa: E501

        :return: The duration of this MonitorRequest.  # noqa: E501
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this MonitorRequest.

        Duration (minutes) of the metric collection  # noqa: E501

        :param duration: The duration of this MonitorRequest.  # noqa: E501
        :type: float
        """

        self._duration = duration

    @property
    def interval(self):
        """Gets the interval of this MonitorRequest.  # noqa: E501

        Interval (seconds) between sampling of the duration  # noqa: E501

        :return: The interval of this MonitorRequest.  # noqa: E501
        :rtype: float
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this MonitorRequest.

        Interval (seconds) between sampling of the duration  # noqa: E501

        :param interval: The interval of this MonitorRequest.  # noqa: E501
        :type: float
        """

        self._interval = interval

    @property
    def metric(self):
        """Gets the metric of this MonitorRequest.  # noqa: E501

        type of monitoring  # noqa: E501

        :return: The metric of this MonitorRequest.  # noqa: E501
        :rtype: str
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this MonitorRequest.

        type of monitoring  # noqa: E501

        :param metric: The metric of this MonitorRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["vm", "cpu", "board_power", "board_watt", "ipmi", "all"]  # noqa: E501
        if metric not in allowed_values:
            raise ValueError(
                "Invalid value for `metric` ({0}), must be one of {1}"  # noqa: E501
                .format(metric, allowed_values)
            )

        self._metric = metric

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MonitorRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MonitorRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
